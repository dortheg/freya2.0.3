#define nfissions 1000000
#define nCosineDir 100 /* number of angle bins */
#define mMax 50        /* The maximum number of ejectiles per fission generated by FREYA */

#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#include "Fission.h"

extern "C" {
   extern int msfreya_setup_c_();
   extern int msfreya_event_c_(int,double,double,double*,int*,int*,double*,int*,int*,double*,int*,double*,int*,double*);
   extern int msfreya_getniso_c_(int *,int *);
   extern int msfreya_getzas_c_(int *,int *);
   extern double msfreya_sepn_c_(int, int, int);
   extern double msfreya_gsmassn_c_(int, int);
   extern int msfreya_geterrors_c_(char *, int *);
   extern int msfreya_reseterrorflag_c_();
   extern int msfreya_errorflagset_c_();
   extern int msfreya_usehostrng_c_();
}

void init(void);
void initFREYA(int& nisosf, int& nisoif, int& niso,
               int** ZAs, int** fistypes);
bool FREYA_event(double ePart, int iso, int fissiontype,
                 int*& ZAs, int*& fistypes, int niso,
                 int* n_nnCorr_vs_mu, double* mu_grid,
                 double minKinEnergyMeV);
FILE* openfile(char* name);
void output_nnCorr_vs_mu(int* n_nnCorr_vs_mu, double* mu_grid);

int main() {
   double energy_MeV = 25.3e-9; // thermal
   int isotope = 94239;
   int fissiontype = 1; // 0: spontaneous fission
                        // 1: neutron-induced fission
   double minKinEnergyMeV=0.5; // minimum neutron kinetic energy

   int nisosf = 0; // Number of spontaneous fission isotopes
   int nisoif = 0; // Number of induced fission isotopes
   int niso = 0;   // Number of fission isotopes

   int** ZAs;      // ZA's of fission isotopes
   int** fistypes; // types of fission [spontaneous (0), induced (1)
   ZAs = new int*;
   fistypes = new int*;

   int maxerrorlength=10000;
   char errors[maxerrorlength];

   int n_nnCorr_vs_mu[nCosineDir];
   double mu_grid[nCosineDir+1];
   for (int i=0; i<nCosineDir; i++) {
     mu_grid[i] = -1.+2./nCosineDir*i;
     n_nnCorr_vs_mu[i] = 0;
   }
   mu_grid[nCosineDir] = 1.;

   init();
   initFREYA(nisosf, nisoif, niso, ZAs, fistypes);
   niso=nisosf+nisoif;
   
   for (int i=0; i<nfissions; i++) {
      if (!FREYA_event(energy_MeV, isotope, fissiontype, 
                       *ZAs, *fistypes, niso,
                       n_nnCorr_vs_mu, mu_grid, minKinEnergyMeV)) {
         int errorlength=maxerrorlength;
         msfreya_geterrors_c_(&errors[0], &errorlength);
         if (errorlength>1) {
            printf("%s\n",errors);
            exit(1);
         }
      }
   }
   output_nnCorr_vs_mu(n_nnCorr_vs_mu, mu_grid);
}

FILE* openfile(char* name) {
   FILE* fp = fopen(name, "w");
   if (fp == (FILE *) 0) fprintf(stderr, "Could not open %s for writing\n", name);
   return fp;
}

void init(void) {
   unsigned short int s[3] = {1234, 5678, 9012};
   int i;
   seed48(s);
   msfreya_usehostrng_c_();
   return;
}

void initFREYA(int& nisosf, int& nisoif, int& niso,
               int** ZAs, int** fistypes) {

   int maxerrorlength=10000;
   char errors[maxerrorlength];

   msfreya_reseterrorflag_c_();
   msfreya_setup_c_();
   if (msfreya_errorflagset_c_()==1) {
      int errorlength=maxerrorlength;
      msfreya_geterrors_c_(&errors[0], &errorlength);
      if (errorlength>1) {
         printf("%s\n",errors);
         exit(1);
      }
   }
   msfreya_getniso_c_(&nisosf, &nisoif);
   niso=nisosf+nisoif;

   // allocate memory to store ZA's for spontaneous and neutron-induced
   // fissions
   *ZAs = new int [niso];
   *fistypes = new int [niso];

   // Populate ZAs and fistypes
   msfreya_getzas_c_(&(*ZAs[0]),&(*fistypes[0]));
}

bool FREYA_event(double ePart, int iso, int fissiontype,
                 int*& ZAs, int*& fistypes, int niso,
                 int* n_nnCorr_vs_mu, double* mu_grid, double minKinEnergyMeV) {
   // if the compound nucleus is ZA, the original nucleus was
   //   ZA for photofission
   //   Z(A-1) for neutron-induced fission
   // treat photofission as if it were neutron-induced fission
   if (fissiontype==2) iso--;
   
   // Find the index of the fission/isotope
   bool foundfission=false;
   int iKm1=0;
   for (iKm1=0; iKm1<niso; iKm1++)
      if (iso == ZAs[iKm1] && ((fissiontype==0) == (fistypes[iKm1]==0))) {
         foundfission=true;
         break;
      }
   if (!foundfission) {
      fprintf(stderr, "ABORT: fission type %d not supported for isotope %d\n", fissiontype, iso);
      exit(1);
   }

   int iK=iKm1+1; // FORTRAN indexing
   int Z=iso/1000;
   int freyaA=iso-1000*Z;
   // watch out! in freya, the A for induced fission is the A of the 
   // compound nucleus (for induced fission, add 1 neutron to the nucleus)
   freyaA+=(fissiontype==0)?0:1;
   msfreya_reseterrorflag_c_();

   // Compute nucleus excitation energy for this event
   double eps0;
   double En;
   switch (fissiontype) {
      case 0:
         // spontaneous fission
         eps0 = 0.;
         En=0.;
         break;
      case 1:
         // neutron-induced fission
      case 2:
         // photon-induced fission
         double sepni;
         sepni = msfreya_sepn_c_(iK,Z,freyaA);
         if (msfreya_errorflagset_c_()==1) return false;

         if (fissiontype==1) {
            // neutron-induced fission
            eps0 = sepni+ePart;
            En=ePart;
         } else if (fissiontype==2) {
            // photon-induced fission
            eps0 = ePart;
            En=ePart-sepni;
            if (En<0) En=0.;
         }
         break;
      default:
         fprintf(stderr, "ABORT: fission type %d not supported\n", fissiontype);
         exit(1);
         break;
   }

   // ...generate fission event
   // declare those, msfreya_event needs them
   double V0[3]; // velocity of the initial nucleus
   for (int i=0; i<3; i++) V0[i]=0; // nucleus at rest

   double P0[5]; // excited energy, momentum and kinetic energy
                // of nucleus before interaction
   double P1[5]; // excited energy, momentum and kinetic energy
                // of fission fragment 1
   double P2[5]; // excited energy, momentum and kinetic energy
                // of fission fragment 2
   int Z1, A1;  // Charge & mass number of fission fragment 1
   int Z2, A2;  // Charge & mass number of fission fragment 2

   double W0=msfreya_gsmassn_c_(Z, freyaA);  // ground-state mass of nucleus
   if (msfreya_errorflagset_c_()==1) return false;
   
   double ndir [3];              // neutron direction ((0,0,0) forces isotropic)
   for (int i=0; i<3; i++)
      ndir[i]=0.;

   P0[0]=W0+eps0;                // Rest energy of init nucleus
   double g0=1.0;                // gamma0
   P0[4]=g0*P0[0];               // Total energy of init nucleus
   for (int i=0; i<3; i++)
      P0[i+1]=P0[4]*V0[i];       // Momentum of initial nucleus

   int mult;                     // Number of particles emitted
   double particles [4*3*mMax];  // their momentum and kinetic energy
   int ptypes [3*mMax];          // their type: 0(g) & 1(n)
   
   msfreya_event_c_(iK,En,eps0,&(P0[0]),&Z1,&A1,&(P1[0]),&Z2,&A2,&(P2[0]),&mult,&(particles[0]),&(ptypes[0]),&(ndir[0]));
   if (msfreya_errorflagset_c_()==1) return false;

   //....look for angular correlations between neutrons
   double* uvw1 = new double [4];
   double* uvw2 = new double [3];
   for (int n1index=0; n1index<mult; n1index++) {
     if (1 == ptypes[n1index]) {
       double E1=particles[n1index*4+3];
       if (E1<minKinEnergyMeV) continue;
       //....found one neutron, look for a second one
       for (int k=0; k<3; k++) uvw1[k] = particles[n1index*4+k];
       double norm1=sqrt(uvw1[0]*uvw1[0]+uvw1[1]*uvw1[1]+uvw1[2]*uvw1[2]);
       for (int k=0; k<3; k++) uvw1[k] /= norm1;
       for (int n2index=n1index+1; n2index<mult; n2index++) {
         if (1 == ptypes[n2index]) {
           double E2=particles[n2index*4+3];
           if (E2<minKinEnergyMeV) continue;
           //....found a second neutron
           for (int k=0; k<3; k++) uvw2[k] = particles[n2index*4+k];
           double norm2=sqrt(uvw2[0]*uvw2[0]+uvw2[1]*uvw2[1]+uvw2[2]*uvw2[2]);
           for (int k=0; k<3; k++) uvw2[k] /= norm2;
           double mu=0;
           for (int k=0; k<3; k++) mu += uvw1[k]*uvw2[k];
           int binindex=floor((mu-mu_grid[0])/(2./nCosineDir));
           if (0<=binindex && binindex<nCosineDir) 
             n_nnCorr_vs_mu[binindex]++;
         }
       }
     }
   }
   delete [] uvw2;
   delete [] uvw1;

   return true;
}

void output_nnCorr_vs_mu(int* n_nnCorr_vs_mu, double* mu_grid) {
   char filename [1024];
   double corr;
   int sum=0;

   sprintf(filename, "nnCorr_vs_mu.res");
   FILE* fp = openfile(filename);
   for (int i=0; i<nCosineDir; i++) sum+=n_nnCorr_vs_mu[i];
   for (int i=0; i<nCosineDir; i++) {
    corr = 1.*n_nnCorr_vs_mu[i]/sum;
    fprintf(fp, "%4.2f - %4.2f : %f : %f\n", 
            mu_grid[i], mu_grid[i+1], corr, sqrt(n_nnCorr_vs_mu[i])/sum);
   }
   fclose(fp);

   return;
}
